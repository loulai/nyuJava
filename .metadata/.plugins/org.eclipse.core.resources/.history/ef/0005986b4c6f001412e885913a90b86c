package hw8matrixs;

public class Matrix {
	
	public static void main(String[] args){
		Matrix myMatrix = new Matrix(2,2);
		System.out.println(myMatrix.getNumOfColumns());
		System.out.println(myMatrix.getNumOfRows());
		System.out.print(myMatrix);
	}
	

	private int numOfRows;
	private int numOfColumns;
	private int[][] rawMatrix;
	
	public Matrix(int row, int column){
		this.numOfRows = row;
		this.numOfColumns = column;
		int[][] matrix = new int[row][column];
		for(int i = 0; i < row; i++) {
			for(int j = 0; j< column; j++) {
				matrix[i][j] = (int) (Math.random() * 21) - 10;
				}
			}
		this.rawMatrix = matrix;
	}
	
	public int getNumOfRows(){
		return numOfRows;
	}
	
	public int getNumOfColumns(){
		return numOfColumns;
	}
	
	public String toString(){
		String myString = "";
		for(int i = 0; i < numOfRows; i++){
			for(int k = 0; k < numOfColumns; k++){
				myString = myString + String.format("%4d ", rawMatrix[i][k]);
			}
		 myString = myString + "\n";
		}
		return myString;
	}

}

/** constructor with 2 params, row column
 * - fill with random generated numbers (1-10)
 * - 1-5 inclusive
 * - if < 0, then default to one
 * - if < 5, default to 5
 * - 
 * 
 * - getNumRows, getNumColumns
 * - all matrix methods
 * - toString()
 * - add(matrix) <so this is an instance method> return boolean
 * - multiply(3) <another instance method>
 */

/** DRIVER
 * - construct > 1) with valid 2)3) row/col too small 4)5) row/col too large
 * - all of which is proven my getnumrows/columns
 * - perform all matrix transformations
 * - perform invalid addtion <expect return false>
 * - perform correct multiplication <pos,neg,zero>
 * - 
 */
