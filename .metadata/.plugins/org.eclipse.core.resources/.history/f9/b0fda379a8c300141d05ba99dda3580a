package temp;

public class LLHomeworkFunctions {

	static public void main(String [] args) {
		
		LLNode<Integer> list = new LLNode<Integer>(3);
		System.out.println(list.info);
		LLNode<Integer> newNode = new LLNode<Integer>(6);
		list.setLink(newNode);
		System.out.println(list.link.getInfo());
	}
	
	/**
	 * @param <T>
	 * @param list1
	 * @param list2
	 * @return true if the lists are equal.  Assume both lists terminate.
	 */
	
	static public <T> boolean equalLists(LLNode<T> list1, LLNode<T> list2) {
		// TODO: Part 1 of this assignment is to implement this correctly.
		
		boolean isEqual = true;
		LLNode<T> head1 = list1.getLink();
		LLNode<T> head2 = list2.getLink();
		
		outerloop:
		while(head1.getLink() != null && head2.getLink() != null){
			if(head1.info != head2.info){
				isEqual = false;
				break outerloop;
			}
		}
		
		/*increment*/
		head1 = head1.getLink();
		head2 = head2.getLink();
		
		if(head1.getLink() == null && head2.getLink() == null){
			if(head1.info != head2.info){
				isEqual = false;
			} else if (head1.getLink() == null || head2.getLink() == null){
				isEqual = false; //always, coz ONE of them is null
				//if both of them were null, the above condition catches it and deals with equality comparison
			}
		}
		
		return isEqual;
		
		
		
	}
	
	/**
	 * @param <T>
	 * @param list1
	 * @return true if the list eventually terminates, and false if the list points back at one of it's
	 *  previous nodes.
	 */
	static public <T> boolean terminates(LLNode<T> list) {
		return true;
	}

}
