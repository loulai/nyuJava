import BinaryHeap.UnderflowException;



public class AssignmentMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	}
	
	public Double findClosest(TreeNode root, Object target) {
	    	BinaryHeap minheap = new BinaryHeap();
	    	minheap.insert(root);
	    	TreeNode<Double> t;
	  
	    	while(!minheap.isEmpty()){
	    		
	    		t = (TreeNode) minheap.deleteMin();
	    		
	    		if(t != null && !t.element.equals(target)){
	    			if(t.left!=null){
	    				t.left.distance += t.distance;
	    				minheap.insert(t.left);
	    			}
	    			if(t.right!=null){
	    				t.right.distance += t.distance;
	    				minheap.insert(t.right);
	    			}
	    		return t.distance;
		    	} //this if loop ends if the element is not found. If the element was found, with min value, then it would've been returned
	    	}
	    	return -1.0;
	  }
	
	public void inputToTree() {
		  /* formats contents into a string that looks like A~20~B~10~.. */
		  String result = "";
		  for(int i = 0; i < this.count.length; i++){
			  if(count[i] != 0){
				result += ( (char)i + "~" + count[i] + "~" );
			  }
		  }

		  /* creating a Huffman tree from the contents */
		  // splits string into array, in preparation for creating an array of huffman nodes */
		  String[] stringToArray = result.split("~");
		  System.out.println();
		  HuffmanNode[] arrayToHuffman = new HuffmanNode[stringToArray.length/2];
		  int k = 0; 
		  for(int i = 0; i < stringToArray.length ; i++){
			HuffmanNode temp = new HuffmanNode(stringToArray[i++], Double.parseDouble(stringToArray[i]));
			arrayToHuffman[k] = temp;
			System.out.printf("%2d. [%s]\n", k, arrayToHuffman[k].toString()); //used to test each huffman node is is correct and prints fine
			k++;
		  }
			
			//creates binary heap from array and assigns it
			BinaryHeap arrayToHeap = new BinaryHeap(arrayToHuffman);
			try {
				this.huffmanTree = HuffmanTree.heapToTree(arrayToHeap); 
			} catch (BinaryHeap.UnderflowException e) {
				e.printStackTrace();
			}
			System.out.println();
			this.huffmanTree.printLegend();
	  }

}
