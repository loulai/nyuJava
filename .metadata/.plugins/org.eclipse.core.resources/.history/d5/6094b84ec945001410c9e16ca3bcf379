import java.util.Scanner;

/*
 * Created on : September 23rd 2014
 * Description: Program allows user to play a simplified game of blackjack with the computer.
 * @author Lou Lai
 */

/**
 * @author louiselai
 *
 */
public class Blackjack2 {

	
	public static void main(String[] args) {
		
		/* Useful definitions:
		 * 'cardNumber' = randomly generated number (an integer from 0 - 51)
		 * 'cardName'   = name of card so humans understand (a String e.g. 5 of hearts, Ace of spades)
		 * 'cardScore'  = the actual worth of the card (an integer from 1 - 11 e.g. 5 of hearts is has a score of 5)
		 */
		
		//USER: generating two random numbers and printing their names.
		int userCardNumber1 = generateNumber();
		int userCardNumber2 = generateNumber();
		System.out.println("You drew    : " + cardNumberToName(userCardNumber1));
		System.out.println("You drew    : " + cardNumberToName(userCardNumber2));
		
		//USER: tallying and printing score
		int userScore = cardNumberToScore(userCardNumber1) + cardNumberToScore(userCardNumber2);
		System.out.println("Your score  : " + userScore);
		
		//DEALER: generating two cards, tallying score. Not showing values because want to keep it hidden.
		int dealerCardNumber1 = generateNumber();
		int dealerCardNumber2 = generateNumber();
		int dealerScore = cardNumberToScore(dealerCardNumber1) + cardNumberToScore(dealerCardNumber1);
		System.out.println("Dealer also drew two cards");
		
		//Accounting for rare condition where someone wins straight up
		if(userScore == 21) {
			System.out.println("The force is strong. You straight up won! \n===YOU WIN===");
		} else if (dealerScore == 21) {
			System.out.println("Wow it's not your day. Dealer hit 21. \n===DEALER WINS===");
		} 
		
		//boolean is used as a condition for 'while' loop to run.
		// It's true here because our first move is to ask the user if they want another card.
		boolean isItUsersTurn = true;
		
		//if it's the users turn AND everyone's scores are below 21, code runs.
		while(isItUsersTurn == true && userScore < 21 && dealerScore < 21) {
			
			//asks the user to choose: to take a card or not?
			System.out.println("\n--- Want another card? Type (y) or (n), then hit return. ---");
			Scanner response = new Scanner(System.in);
			String yesOrNo = response.next();
			
			
			if (!yesOrNo.equalsIgnoreCase("n") && !yesOrNo.equalsIgnoreCase("y")) { //set up to catch invalid inputs
				System.out.println(">>> You shall not pass. I asked (y) or (n). Try again!");
			} else if(yesOrNo.equalsIgnoreCase("n")) { 
				System.out.println("\n--- Dealer's turn --- ");
				isItUsersTurn = false; //because user doesn't want a card, it's not the user's turn. Changing to false
				                       //changes the condition so the 'while' loop won't repeat.
			} else { //the only other option is 'y'. Now we deal a card to the user.
				
				//creating random card, and printing
				int newCardNumber = generateNumber();
				System.out.println("You drew    : " + cardNumberToName(newCardNumber));
				
				//tallying up score, and printing
				userScore = userScore + cardNumberToScore(newCardNumber);
				System.out.println("New score   : " + userScore);
				
				//if user at this point gets 21, the user wins or busts. Both will display message and break loop.
				//if user wins/busts, no other while loop in entire program will run, because the condition (must have score < 21) isn't met.
				if(userScore > 21){
					System.out.println("Whoopsie, you bust! \n===DEALER WINS===");
					break;
				} else if (userScore == 21) {
					System.out.println("You hit 21! \n===YOU WIN===");
					break;
				}
				
			}
			
		}
		
		
		int dealerRound = 1; //set up to count how many rounds the dealer has had, because we've decided always to have only 2 rounds.
		while(isItUsersTurn == false && dealerScore < 21 && userScore < 21 && dealerRound <= 2) {
			int dealerNewCardNumber1 = generateNumber();
			dealerScore = dealerScore + cardNumberToScore(dealerNewCardNumber1);
			
			//DEALER: generating random number and new card, and printing it
			String dealerNewCardName1 = cardNumberToName(dealerNewCardNumber1);
			System.out.println("Dealer draws: " + dealerNewCardName1);
			
			//checking for possible win/bust, like in the first while loop.
			if (dealerScore > 21) {
				System.out.println("Dealer bust! \n===YOU WIN===");
				break;
			} else if (dealerScore == 21) {
				System.out.println("Dealer hit 21! \n===DEALER WINS===");
				break;
			} else if (dealerScore < 21) {
				dealerRound = dealerRound + 1; //increments dealerRound, so we can count how many times dealer has drawn a card
			}
		}
		
		// at this point, User and Dealer both have scores < 21. The score closes to 21 wins.
		if ( userScore > dealerScore && userScore < 21 && dealerScore < 21) { // checks if user has a greater score than dealer (but still under 21)
			System.out.printf("Your score (%d) is closer than dealer (%d) to 21. \n===YOU WIN===", userScore, dealerScore);
		} else if ( userScore < dealerScore && userScore < 21 && dealerScore < 21) { //vice versa
			System.out.printf("Dealers score (%d) is closer than yours (%d) to 21. \n===DEALER WINS===", dealerScore, userScore);
		} else if (userScore < 21 && dealerScore < 21) { //accounting for 
			System.out.println("Ermegawd it's a draw! \n===BATTLE IT OUT===");
		}
	}
	
 	/**
 	 * @return     a random integer between 0 and 51 (inclusive)
 	 */
 	public static int generateNumber(){
 			int cardNumber = (int) (Math.random() * 52);
 			return cardNumber;
 	}
 	
 	
 	/**
 	 * @param generatedNumber random integer between 0 and 51 (inclusive)
 	 * @return	              'score' of the card, as an integer
 	 */
 	public static int cardNumberToScore(int generatedNumber){
 		generatedNumber = generatedNumber + 1; // as mentioned in GetCard.java, must plus one for logic to work
 		int cardScore; //initializing return value
 		
 		if (generatedNumber % 13 == 1){ //logic similar as in GetCard.java. Mod determines position within suit, and its score
 			                            // is derived from that position.
			cardScore = 1;
		} else if (generatedNumber % 13 == 11){
			cardScore = 10;
		} else if (generatedNumber % 13 == 12) {
			cardScore = 10;
		} else if (generatedNumber % 13 == 0) {
			cardScore = 10;
		} else {
			cardScore = generatedNumber - (((generatedNumber - 1)/13) * 13); //explanation of this funky equation is in GetCard.java
		}
 		return cardScore;
 	}
 	
 	
 	/**
 	 * @param generatedNumber random integer between 0 and 51 (inclusive)
 	 * @return                string name of card so that humans understand
 	 */
 	public static String cardNumberToName(int generatedNumber) { //logic identical to GetCard.java
 			String card;
 			generatedNumber = generatedNumber + 1;
			
			if (generatedNumber % 13 == 1){
				card = "Ace";
			} else if (generatedNumber % 13 == 11){
				card = "King";
			} else if (generatedNumber % 13 == 12) {
				card = "Queen";
			} else if (generatedNumber % 13 == 0) {
				card = "Jack";
			} else {
				int cardNumber = generatedNumber - ((generatedNumber - 1)/13) * 13;
				card = Integer.toString(cardNumber);
			}
			
			generatedNumber = generatedNumber - 1;
			
			if (generatedNumber / 13 == 0) {
				card = card + " of hearts";
			} else if (generatedNumber / 13 == 1) {
				card = card + " of spades";
			} else if (generatedNumber / 13 == 2) {
				card = card + " of clubs";
			} else {
				card = card + " of diamonds";
			}
			
			return card;		
 	}
 	
}