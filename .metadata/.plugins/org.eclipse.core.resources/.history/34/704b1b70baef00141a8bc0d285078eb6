import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class HuffmanConverter { 
  // The # of chars in the ASCII table dictates
  // the size of the count[] & code[] arrays.
  public static final int NUMBER_OF_CHARACTERS = 256;
 
  // the contents of our message...
  private String contents;
 
  // the tree created from the msg
  private HuffmanTree huffmanTree;
 
  // tracks how often each character occurs
  private int count[];
 
  // the huffman code for each character
  private String code[];
 
  // stores the # of unique chars in contents
  private int uniqueChars = 0; //(optional)
  
  public static void main(String args[]) {
	  HuffmanConverter hc = new HuffmanConverter(fileToString("data2"));
	  hc.recordFrequencies();
	  hc.frequenciesToTree();
	  hc.treeToCode();
	  String y = hc.encodeMessage();
	  System.out.println("FINAL STRING YALL: " + y);
	  String real
	  String mine
	  
	  System.out.println(mine.equals(real));
  }

  /** Constructor taking input String to be converted */
  public HuffmanConverter(String input) {
    this.contents = input;
    this.count = new int[NUMBER_OF_CHARACTERS];
    this.code = new String[NUMBER_OF_CHARACTERS];
  }
  
  public static String fileToString(String filename){
		/* convert file to String */
		String text = "";
		try {
			text = new Scanner( new File(System.getProperty("user.dir") + "/src/" + filename)).useDelimiter("\\A").next();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return text;
  }
 
  /**
   * Records the frequencies that each character of our
   * message occurs...
   * I.e., we use 'contents' to fill up the count[] list...
   */
  public void recordFrequencies() {
	 //make char array from string
	 char[] c = this.contents.toCharArray();
	 
	 for(int i = 0; i < c.length; i++){
		 count[(int) c[i]]++; //incremeting the count of each char, as positioned by the ASCII numbering
	 }
	 
	 //print for debugging, can delete
	 for(int i = 0; i < c.length; i++){
		 System.out.print( " [ " + c[i] + " ] ");
		 System.out.println((int) c[i]);
	 }
	 for(int i = 0; i < 256; i++){
		 System.out.printf("%2d => %d\n", i, count[i]);
	 }
  }
 
  /**
   * Converts our frequency list into a Huffman Tree. We do this by
   * taking our count[] list of frequencies, and creating a binary
   * heap in a manner similar to how a heap was made in HuffmanTree's
   * fileToHeap method. Then, we print the heap, and make a call to
   * HuffmanTree.heapToTree() method to get our much desired
   * HuffmanTree object, which we store as huffmanTree.
   */
  public void frequenciesToTree() throws UnderflowException, UnderflowException {
	  /* formats contents into a string that looks like A 20 B 10 .. */
	  String result = "";
	  for(int i = 0; i < this.count.length; i++){
		  if(count[i] != 0){
			  if(i == 32) result += ((char)i + "" + count[i] + " " ); //accounting for when the character is a space, so that splitting with (" ") later on works
			  else result += ( (char)i + " " + count[i] + " " );
		  }
	  }
	  System.out.print("===Data broken down: " + result);

	  /* creating a Huffman tree from the contents */
	  // splits string into array, in preparation for creating an array of huffman nodes */
	  String[] stringToArray = result.split(" ");
	  System.out.println();
//	  for extra clarity of each array item, can delete
	  for(int i = 0; i < stringToArray.length; i++){
		  System.out.print("[ " + stringToArray[i] + " ]");
	  }
	  System.out.println();
	  HuffmanNode[] arrayToHuffman = new HuffmanNode[stringToArray.length/2];
	  int k = 0; //counter for new array of Huffman nodes
	  for(int i = 0; i < stringToArray.length ; i++){
		System.out.println("i:  " + i);
		HuffmanNode temp = new HuffmanNode(stringToArray[i++], Double.parseDouble(stringToArray[i]));
		System.out.println("k:  " + k);
		arrayToHuffman[k] = temp;
		System.out.println("HUFFNODE: " + arrayToHuffman[k].toString()); //used to test each huffman node is is correct and prints fine
		k++;
		System.out.println("---------------");
	  }
		
		//creates binary heap from array and assigns it
		BinaryHeap arrayToHeap = new BinaryHeap(arrayToHuffman);
		try {
			this.huffmanTree = HuffmanTree.heapToTree(arrayToHeap); 
		} catch (BinaryHeap.UnderflowException e) {
			e.printStackTrace();
		}
  }
 
  /*
   * Iterates over the huffmanTree to get the code for each letter.
   * The code for letter i gets stored as code[i]... This method
   * behaves similarly to HuffmanTree's printLegend() method...
   * Warning: Don't forget to initialize each code[i] to ""
   * BEFORE calling the recursive version of treeToCode...
   */
  public void treeToCode(){
	  for(int i = 0; i < NUMBER_OF_CHARACTERS; i++){
		  code[i] = "";
	  }
	  
	  treeToCode(huffmanTree.root, "");
	 
	 //DELETE : this is for debugging
	 //for(int i = 0; i < NUMBER_OF_CHARACTERS; i++) System.out.printf("%3d. %c %s\n", i, (char)i, code[i]);
  }
 
  /**
   * A private method to iterate over a HuffmanNode t using s, which
   * contains what we know of the HuffmanCode up to node t. This is
   * called by treeToCode(), and resembles the recursive printLegend
   * method in the HuffmanTree class. Note that when t is a leaf node,
   * t's letter tells us which index i to access in code[], and tells
   * us what to set code[i] to...
   */
  private void treeToCode(HuffmanNode t, String s){
	  if(t.letter.length() > 1){
		  treeToCode(t.left, s + "1");
		  treeToCode(t.right, s + "0");
	  }
	  
	  if(t.letter.length() == 1){
		  code[(int)t.letter.charAt(0)] = s; //gets char, uses it as index, stores code
	  }
  }
 
  /**
   * Using the message stored in contents, and the huffman conversions
   * stored in code[], we create the Huffman encoding for our message
   * (a String of 0's and 1's), and return it...
   */
  public String encodeMessage(){
	  String s = "";
	  char[] arr = contents.toCharArray();
	  for(int i = 0; i < arr.length; i++){
		  if(!code[(int)arr[i]].equals("")){
			  s += code[(int)arr[i]];
			  System.out.println(arr[i] + " -> " + code[(int)arr[i]]);
		  }
	  }
	  return s;
  }
 
  /**
   * Reads in the contents of the file named filename and returns
   * it as a String. The main method calls this method on args[0]...
   */
  public static String readContents(String filename){}
 
  /**
   * Using the encoded String argument, and the huffman codings,
   * re-create the original message from our
   * huffman encoding and return it...
   */
  public String decodeMessage(String encodedStr) {}
 
  /**
   * Uses args[0] as the filename, and reads in its contents. Then
   * instantiates a HuffmanConverter object, using its methods to
   * obtain our results and print the necessary output. Finally,
   * decode the message and compare it to the input file.<p>
   * NOTE: Example method provided below...
   *
   *
   */
  

}
