package temp;

public class FastMaxStack<T> implements MaxStack<T>{
	
	private LLNode<T> top;
	private LinkedStack<T> maxStack;
	
	public static void main(String[] args){
		/* setting up linked list */
		LLNode<Integer> a1 = new LLNode<Integer>(8);
		LLNode<Integer> a2 = new LLNode<Integer>(6);
		a1.setLink(a2);
		LLNode<Integer> a3 = new LLNode<Integer>(9);
		a2.setLink(a3);
		FastMaxStack f = new FastMaxStack(new LLNode<Integer>(1));
		f.push(2);
		System.out.println(f.top.info);
	}

	public FastMaxStack(LLNode<T> top) {
		this.top = top;
	}

	@Override
	public boolean isEmpty() {
		return top == null;
	}

	@Override
	public void push(T info) {
		top = top.pushValue(info);
		
		if(this.isEmpty()){
			maxStack.top.pushValue(info); //push into the stack if it's the first one
		}
		
	}

	@Override
	public T pop() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T getMaxSoFar() {
		// TODO Auto-generated method stub
		return null;
	}

}
