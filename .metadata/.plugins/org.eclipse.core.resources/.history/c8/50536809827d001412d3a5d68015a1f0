import processing.core.PApplet;

public class ProcessingGame extends PApplet {	
	
	int timeCounter = 0; //increments each time draw loop is run, so effectively acts as a time counter
	Disk[] totalDisks = new Disk[5]; //an array of empty Disk objects
	int score = 0; //score of the game
	
	
	/* runs when the game starts. Draws a canvas and generates an array of initialized Disks objects
	 * @return void no return
	 */
	public void setup() {
		size(800,600); //size of canvas
		background(255); //colour of canvas
		
		for(int i = 0; i < 5; i++){
			totalDisks[i] = new Disk(this); //generating 5 Disk objects
		}
	}

	public void draw() {
		timeCounter ++; //increment each time the draw loop is run
		if (timeCounter < 100) { //only runs for a certain amount of 'time', because the draw is called a certain amount of times a second
			//here it runs when draw is called less than 1000 times
			background(100,100,100); //filling in the background each time
			
			for(int i = 0; i < totalDisks.length; i ++) { //moving each of the 5 disks
				Disk d = totalDisks[i];
				
				fill(100,100,100);
				d.move();
				
				textSize(20);
				fill(10,0,0);
				textAlign(CENTER);
				text(d.getValue(), d.getX(), d.getY());
				
				if(mousePressed){
					if(mouseX >= (d.getX() - 30) && mouseX <= (d.getX() + 30) && mouseY >= (d.getY() - 30) && mouseY <= (d.getY() + 30)){
						score = score + d.getValue();
						
						Disk[] newDisks = new Disk[totalDisks.length - 1];
						for (int k = 0; k < totalDisks.length; k++){
							if (i != k){
								newDisks[counter] = totalDisks[k];
								counter++;
							}
						}
						totalDisks = newDisks;
						counter = 0;
					}
				}
				text(score, 70,70);
				
			}
			timeCounter+=1;
			
		} else {
			background(100,100,100);
			textSize(50);
			text(score, 400,300);
		}
		
	}

	public static int timeSince(long startTime){
		long currentTime = System.currentTimeMillis();
		return (int)(currentTime - startTime);
	}
}